{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"pygments_lexer":"ipython3","nbconvert_exporter":"python","version":"3.6.4","file_extension":".py","codemirror_mode":{"name":"ipython","version":3},"name":"python","mimetype":"text/x-python"},"kaggle":{"accelerator":"none","dataSources":[],"isInternetEnabled":true,"language":"python","sourceType":"script","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import torch\nimport torch.nn as nn\nimport torch.optim as optim\nimport torchvision\nimport torchmetrics\n\n\nclass FCDiscriminator(nn.Module):\n\n    def __init__(self, num_classes, ndf = 64):\n        super(FCDiscriminator, self).__init__()\n\n        self.conv1 = nn.Conv2d(num_classes, ndf, kernel_size=4, stride=2, padding=1)\n        self.conv2 = nn.Conv2d(ndf, ndf*2, kernel_size=4, stride=2, padding=1)\n        self.conv3 = nn.Conv2d(ndf*2, ndf*4, kernel_size=4, stride=2, padding=1)\n        self.conv4 = nn.Conv2d(ndf*4, ndf*8, kernel_size=4, stride=2, padding=1)\n        self.classifier = nn.Conv2d(ndf*8, 1, kernel_size=4, stride=2, padding=1)\n        self.leaky_relu = nn.LeakyReLU(negative_slope=0.2, inplace=True)\n        #self.up_sample = nn.Upsample(scale_factor=32, mode='bilinear')\n        #self.sigmoid = nn.Sigmoid()\n\n\n    def forward(self, x):\n        x = self.conv1(x)\n        x = self.leaky_relu(x)\n        x = self.conv2(x)\n        x = self.leaky_relu(x)\n        x = self.conv3(x)\n        x = self.leaky_relu(x)\n        x = self.conv4(x)\n        x = self.leaky_relu(x)\n        x = self.classifier(x)\n        #x = self.up_sample(x)\n        #x = self.sigmoid(x) \n\n        return x","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true},"execution_count":null,"outputs":[]}]}